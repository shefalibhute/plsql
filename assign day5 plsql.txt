1)
create or replace package MANAGE_EMP_PACK as
procedure HIRE_EMP(p_empno emp.empno%type,p_ename emp.ename%type,p_job emp.job%type,p_mgr emp.mgr%type,p_hiredate emp.hiredate%type,p_sal emp.sal%type,p_comm emp.comm%type,p_deptno emp.deptno%type) ;

procedure FIRE_EMP(f_empno emp.empno%type) ;
end;
/

create or replace package body MANAGE_EMP_PACK as

function VALIDATE_EMP(v_empno emp.empno%type) return boolean as
v_ename emp.ename%type;
begin
select ename into v_ename from emp where empno=v_empno;
if v_ename is not null then
return true;
else
return false;
end if;
exception
when no_data_found then 
return false;
end;

procedure HIRE_EMP(p_empno emp.empno%type,p_ename emp.ename%type,p_job emp.job%type,p_mgr emp.mgr%type,p_hiredate emp.hiredate%type,p_sal emp.sal%type,p_comm emp.comm%type,p_deptno emp.deptno%type)  as
v_insert_cnt number:=0;
begin
if  VALIDATE_EMP(p_empno) then
dbms_output.put_line('emp no already in use');
else
insert into emp values(p_empno,p_ename,p_job,p_mgr,p_hiredate,p_sal,p_comm,p_deptno);
v_insert_cnt:=v_insert_cnt+1;
dbms_output.put_line(v_insert_cnt);
end if;
end;

procedure FIRE_EMP(f_empno emp.empno%type)  as
v_delete_cnt number:=0;
begin
if  VALIDATE_EMP(f_empno) then
delete from emp where empno=f_empno;
dbms_output.put_line('one employee record is deleted');
v_delete_cnt:=v_delete_cnt+1;
dbms_output.put_line(v_delete_cnt);
else
dbms_output.put_line('wrong employee number is entered');
end if;
end;
end;
/

execute MANAGE_EMP_PACK.HIRE_EMP(7599,'shashank','sales',7788,'15-MAR-2017',5000,0,10);
execute MANAGE_EMP_PACK.FIRE_EMP(7599);

2)
create or replace package MY_EMP_PACK as
function GET_AVG_SAL(p_ename emp.ename%type) return number;
function GET_AVG_SAL(p_no emp.empno%type) return number;
end;
/

create or replace package body MY_EMP_PACK as
function GET_AVG_SAL(p_ename emp.ename%type) return number as
v_no emp.deptno%type;
v_sal emp.sal%type;
begin
select deptno into v_no from emp  where ename=p_ename;
select avg(sal) into v_sal from emp where deptno=v_no;
dbms_output.put_line('from ename avg sal is'||v_sal);
return v_sal;
end;

function GET_AVG_SAL(p_no emp.empno%type) return number as
v_no emp.deptno%type;
v_sal emp.sal%type;
begin
select deptno into v_no from emp  where empno=p_no;
select avg(sal) into v_sal from emp where deptno=v_no;
dbms_output.put_line('from empno avg sal is'||v_sal);
return v_sal;
end;
end;
/

declare
v_sal number;
begin
v_sal:=MY_EMP_PACK.GET_AVG_SAL('KING');
v_sal:=MY_EMP_PACK.GET_AVG_SAL(7844);
end;
/

3)
create or replace package  MY_PLANS as
procedure Display_Plans ;
end;
/

create or replace package body  MY_PLANS as
function Find_Plan return number as
v_id number;
begin
select plan_id into v_id from customers group by plan_id having count(*)=(select max(count(*)) from customers group by plan_id);
dbms_output.put_line('plan_id is     '||v_id);
return v_id;
end;

procedure Display_Plans as 
s_name plans.plan_name%type;
v_name plans.plan_name%type;
s_no plans.service_id%type;
v_id number;
begin
v_id:=MY_PLANS.Find_Plan;
select plan_name,service_id into v_name,s_no from plans where plan_id=v_id;
select service_name  into s_name from services where service_id=s_no;
dbms_output.put_line('plan name is   '||v_name||'    service name is   '||s_name);
end;
end;
/ 

execute MY_PLANS.Display_Plans;

4)
		


create or replace package pkgDisplay_details as
function fnDisplayStatus(p_id publications.PAPER_ID%type) return varchar2;
procedure prDispCount(a_id publications.PRI_AUTHR_ID%type,s_id publications.status%type);
end;
/

create or replace package body pkgDisplay_details as
function fnDisplayStatus(p_id publications.PAPER_ID%type) return varchar2 as
status_id publications.status%type;
begin
select status into status_id from publications where paper_id=p_id;
dbms_output.put_line('status is=   '||status_id);
return status_id;
exception
when no_data_found then
dbms_output.put_line('paper_id is invalid');
end;

 procedure prDispCount(a_id publications.PRI_AUTHR_ID%type,s_id out publications.status%type) as
c_id number;
begin
select count(paper_id),status into c_id,s_id from publications group by status having PRI_AUTHR_ID=a_id; 
dbms_output.put_line('no of papers published by author is   '||c_id||'       status of papers is  '||s_id);
end;
end;
/

declare
d_id publications.status%type;
begin
d_id:=pkgDisplay_details.fnDisplayStatus('P003');
dbms_output.put_line('status of the paper is  '||d_id);
end;
/
pkgDisplay_details.prDispCount('A002','PUBLISHED');				
end;
/

declare
a_id publications.PRI_AUTHR_ID%type:='A001';
c_id number;
begin
select count(paper_id) into c_id from publications group by status having PRI_AUTHR_ID=a_id; 
end;
/





declare
c_id number;

begin
select count(paper_id) into c_id from publications group by PRI_AUTHR_ID having PRI_AUTHR_ID='A001';
dbms_output.put_line(c_id);
end;
/






